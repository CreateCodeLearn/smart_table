# import libraries
import pandas as pd
import numpy as np

# read in test data and transform into an np array for later calculations
guest_matrix =np.array(pd.read_csv("../../data/test_guest.csv", sep=";",usecols= [1,2,3,4,5,6,7,8,9,10]))

# initial values for number of people, seats per table, iterations
attending = 10
seats_per_table = 5
iters = 50

#def seating_iterative(attending, seats_per_table, iters, guest_matrix):

while attending > 0:
    # create binary numpy array with given values
    arr_bin = np.array([1]*seats_per_table + [0]*(attending - seats_per_table) )

    # for testing only
    np.random.shuffle(arr_bin)

    # initialise best fit and best array for comparison
    arr_best = np.array(arr_bin)
    fit_best = guest_matrix.dot(arr_best).dot(arr_best)

    # while loop for seating iteratively
    i = 0
    while i < iters:
        np.random.shuffle(arr_bin)
        fit_new = guest_matrix.dot(arr_bin).dot(arr_bin)

        if fit_new > fit_best:
            arr_best = np.array(arr_bin)
            fit_best = fit_new
    #print statement for testing only
        print (arr_best, "; ", fit_best, "; ",arr_bin, "; ",fit_new)
        i += 1

    # determine indices of rows to be deleted
    get_indexes = lambda arr_best, xs: [j for (y, j) in zip(xs, range(len(xs))) if arr_best == y]
    i_del = get_indexes(1,arr_best)
    print(i_del)

    # deleting seated guests from guest matrix
    guest_matrix = np.delete(guest_matrix, i_del, 0)
    guest_matrix = np.delete(guest_matrix, i_del, 1)
    print(guest_matrix)

    # minimise attending
    attending -= seats_per_table



# calling seating algorithm until all guests are seated
#while attending > 0:
